import:
    - https://tangrams.github.io/blocks/patterns/stripes.yaml
    - https://tangrams.github.io/blocks/space/screen.yaml
    
scene:
    background:
        color: white

global:
    highlight:
        color: [1,1,1,0.25]
        width: 2px
    grey:
        color: [.5,.5,.5,0.25]
        width: 2px
    black:
        color: [0,0,0,0.25]
        width: 2px

    # replaced by app JS, used to look-up feature props that may be nested
    lookupFeatureProp: function(feature) { return null; }
    lookupFeatureLabelProp: function(feature) { return null; }

    # dyanmic feature coloring, using the currently defined "color mode"
    # the `colorState` global holds settings that may be relevant to each mode (e.g. min/max, palette, etc.)
    featureColorDynamic: |
      function (feature, global) {
        try {
          if (global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              return global.colorFunctions[global.colorMode].color(
                global.lookupFeatureProp(feature),
                global.colorState
              );
            }
            else {
              return global.colorFunctions[global.colorMode].color(
                feature,
                global.colorState
              );
            }
          }
        }
        catch(e) { } // fallthrough to default color on exception
        return 'rgba(127, 127, 127, .25)';
      }

    # simple color by feature color property, or fallback to geometry type
    featureColorDefault: |
        function(feature, global, $geometry) {
            var color;
            if (feature.color) {
                color = feature.color
            }
            else if ($geometry === 'point') {
              color = [1, 0, 0, 0.5];
            }
            else if ($geometry === 'line') {
              color = [1, 1, 0, 0.3];
            }
            else if ($geometry === 'polygon') {
              color = [1, 0, 1, 0.3];
            }
            return color;
        }

    # optionally hide feature values that are above or below the current filter range
    featureFilterOutliers: |
        function() {
          if (global.colorState.featurePropHideOutliers && global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              var value = global.colorState.colorHelpers.parseNumber(global.lookupFeatureProp(feature));
              if (value < global.colorState.featurePropMinFilter ||
                  value > global.colorState.featurePropMaxFilter+1) {
                return false;
              }
            }
          }
          return true;
        }

    # optionally filter by specific property/value combination
    featureFilterSelectedValue: |
        function() {
          if (global.colorState.featurePropStack != null && global.colorState.featurePropValue != null) {
            var value = global.lookupFeatureProp(feature);
            if (value !== global.colorState.featurePropValue) {
              return false;
            }
          }
          return true;
        }

    # used for dynamic text_source on feature labels
    featureLabelText: |
        function() {
          return global.lookupFeatureLabelProp(feature);
        }

sources:
#     _xyzspace: # this source is created at run-time based on XYZ space
    mapzen: #xyz-osm
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
        url_params:
            access_token: global.access_token
        max_zoom: 2
    _xyzspace:
        max_zoom: 1

styles:
    projection:
        mix: []
    _points:
        base: points
        mix: projection
        blend: overlay
        blend_order: 0
    _text:
        base: text
        mix: projection
        blend: overlay
        blend_order: 11
    _lines:
        base: lines
        mix: projection
        blend: opaque
        blend_order: 0
    _lines_low:
        base: lines
        mix: projection
        blend: inlay
        blend_order: 2
    _polygons_inlay:
        base: polygons
        mix: projection
        blend: inlay
        blend_order: 0
    _polygons_overlay:
        base: polygons
        mix: projection
        blend: overlay
        blend_order: 1

    pallete:
        shaders:
            blocks: 
                global: |
                    // Common Values 
                    //================================
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(1.);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);
    waves:
        base: polygons
        mix: [space-screen, pallete, patterns-stripes, projection]
        shaders: 
            blocks: 
                color: |
                    vec2 pos = getScreenNonStretchCoords();
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb,background,stripes(pos*200.,.4));

layers:

    _xyz_dots:
        filter:
          all:
            - $geometry: point
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        draw:
            points:
                style: _points
                interactive: true
                collide: false
                blend_order: 0 # put our points under the basemap labels
                color: function(){ return global.featureColorDefault(feature, global, $geometry); }
                size: 6px
                outline: {}
                text:
                    visible: false # updated by JS app at run-time
                    text_source: global.featureLabelText
                    optional: true
                    font: global.featureLabelFont # set by the basemap

    _xyz_lines:
        filter:
          all:
            - $geometry: line
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        draw:
            lines:
                style: _lines
                interactive: true
                color: function(){ return global.featureColorDefault(feature, global, $geometry); }
                width: 4px
                order: 2000
                outline:
                   color: white
                   width: 0px
            text:
                style: _text
                visible: false # updated by JS app at run-time
                text_source: global.featureLabelText
                # unique repeat group per feature, to avoid culling of labels with same values
                repeat_group: function() { return $id }
                font: global.featureLabelFont # set by the basemap

    _xyz_polygons:
        filter:
          all:
            - $geometry: polygon
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        _outlines:
            draw:
                lines:
                    style: _lines
                    color: [0, 1, 1, 0.35]
                    width: 1px
                    order: 2000
        draw:
            polygons:
                style: _polygons_inlay
                interactive: true
                color: function(){ return global.featureColorDefault(feature, global, $geometry); }
                width: 2px
                order: 300
            text:
                style: _text
                visible: false # updated by JS app at run-time
                text_source: global.featureLabelText
                # unique repeat group per feature, to avoid culling of labels with same values
                repeat_group: function() { return $id }
                repeat_distance: 700px # allow polygon labels to repeat over a longish distance
                font: global.featureLabelFont # set by the basemap

    boundaries:
        # enabled: false
        data: { source: mapzen }
        draw:
            lines:
                style: _lines
                order: 10
                color: [0,0,0,0.25]
                width: [[5,1px],[10,2px]]
    water:
        data: { source: mapzen }
        draw:
            waves:
                order: 20
                color: [0.824, 0.812, 0.804]
            # points:
            #     style: _points
            #     buffer: 8px;
            #     font:
            #         typeface: Italic 14px Times
            #         fill: black
            #         stroke: { color: white , width: 5 }
        lakes:
            filter: { kind: [lake, riverbank, dock, water, basin, reservoir, playa, canal, dam, ditch, drain, river, stream]}
            draw:
                lines:
                    style: _lines
                    order: 1 # global.order hides this for some reason
                    color: black
                    cap: round
                    width: .5px
    places:
        data: { source: mapzen }
        # filter: { kind: country }
        # filter: { name: [British Columbia, Alberta, Saskatchewan, Manitoba, Ontario, Québec, New Brunswick, Nova Scotia, Prince Edward Island, Newfoundland and Labrador, ᓄᓇᕗᑦ Nunavut, Northwest Territories, Yukon]}
        draw:
            text:
                style: _text
                buffer: 8px
                font:
                    # typeface: Italic 10px Times
                    fill: black
                    stroke: { color: white , width: 5 }
