global:
    highlight:
        color: [1,1,1,0.25]
        width: 2px
    grey:
        color: [.5,.5,.5,0.25]
        width: 2px
    black:
        color: [0,0,0,0.25]
        width: 2px

    # dynamic feature coloring, using the currently defined "color mode"
    # the `colorState` global holds settings that may be relevant to each mode (e.g. min/max, palette, etc.)
    featureColorDynamic: |
      function () {
        if (global.colorFunctions[global.colorMode]) {
          if (global.colorFunctions[global.colorMode].useProperty) {
            return global.colorFunctions[global.colorMode].color(
              feature[global.colorState.featureProp],
              global.colorState
            );
          }
          else {
            return global.colorFunctions[global.colorMode].color(
              feature,
              global.colorState
            );
          }
        }
        return 'rgba(127, 127, 127, .5)';
      }

    # simple color by feature color property, or fallback to geometry type
    featureColorDefault: |
        function() {
            var color;
            if (feature.color) {
                color = feature.color
            }
            else if ($geometry === 'point') {
              color = [1, 0, 0, 0.5];
            }
            else if ($geometry === 'line') {
              color = [1, 1, 0, 0.3];
            }
            else if ($geometry === 'polygon') {
              color = [1, 0, 1, 0.3];
            }
            return color;
        }

    property_hash_name: TRAJUNCTYP

    var_property_color_hash: |
        function(){
            var prop = global.property_hash_name
            var value = feature[prop];
            if (typeof value !== 'string') {
              value = (value === undefined ? 'undefined' : JSON.stringify(value));
            }

            if (['null', 'undefined'].indexOf(value) > -1) {
              return [0.5,0.5,0.5,0.5]; // handle null/undefined values
            }

            // console.log('feature.prop',x)
            var hash = 0, i, chr;
            if (value === 0){hash = 0};
            for (i = 0; i < value.length; i++) {
                chr   = value.charCodeAt(i);
                hash  = ((hash << 5) - hash) + chr;
                hash |= 0; // Convert to 32bit integer
            }
            var color = 'hsla(' + hash + ', 100%, 50%, 0.75)'
            return color
        }

    fixed_property_color_hash: |
        function(){
            var x = ''
            var prop = global.property_hash_name // 'TRAJUNCTYP'
            if (feature[prop] != null) {
                x = feature[prop]
            }
            var props = JSON.stringify(x)
            var hash = 0, i, chr;
            if (props === 0){hash = 0};
            for (i = 0; i < props.length; i++) {
                chr   = props.charCodeAt(i);
                hash  = ((hash << 5) - hash) + chr;
                hash |= 0; // Convert to 32bit integer
            }
            var color = 'hsla(' + hash + ', 100%, 50%, 0.75)'
            return color
        }

    viridis_value:
        min: 1970 # assign property value to this in .js
        max: 2019 # assign property value to this in .js
        prop: 'x'
        property_value: 2000
        # property_value: function(feature){return feature.install_yr}
        #10 assign property value to this in .js?
        color_range: |
            function(){
                var min = global.viridis_value.min
                var max = global.viridis_value.max
                var delta = max - min
                // var delta = global.viridis.range
                // var number = feature.update_yr
                // var number = feature.install_yr
                // need to pass feature[prop]
                // var number = global.viridis_value.property_value
                var number = parseFloat(feature[global.viridis_value.prop]);

                if (typeof number !== 'number' || isNaN(number)) {
                  return [0.5,0.5,0.5,0.5]; // handle non-numeric values
                }

                //if (typeof number === 'string') {
                //  number = number.split('').reduce((a, c) => a + c.charCodeAt(0), 0);
                //}

                //var number = global.viridis_value.property_value(feature)
                // if (number < -1){number = -1}
                var ratio = 1 - ((max - number)/delta)
                var viridis = Math.round(ratio * 255)
                // if (viridis < 0){viridis = 0}
                // console.log("d",delta, "n",number, "r",ratio, "v", viridis)
                var color = global.viridis_inferno[viridis]
                // console.log(color)
                return color
            }

    viridis_count:
        items: 1000 # assign total number of features  to this in .js
        rank: 10 # assign property value to this in .js?
        color_range: |
            function(){
                var delta = global.viridis_count.items
                var number = global.viridis_count.rank
                if (number < -1){number = -1}
                var ratio = number/delta // fewer is brighter
                var viridis = Math.round(ratio * 255)
                // if (viridis < 0){viridis = 0}
                // console.log("d",delta, "n",number, "r",ratio, "v", viridis)
                var color = global.viridis[viridis]
                // console.log(color)
                return color
            }

sources:
    _xyzspace:
        url: https://xyz.api.here.com/hub/spaces/cacVJZ1K/tile/web/{z}_{x}_{y}
        type: GeoJSON
        url_params:
            access_token: AVoxWfIDYgZOr4zOaUV3urg
            # tags: YOUR_TAG
            # limit: 50000 #
            clip: true


styles:
    _points:
        base: points
        blend: overlay
        blend_order: 0
    _text:
        base: text
        blend: overlay
        blend_order: 11
    _lines:
        base: lines
        blend: overlay
        blend_order: 0
    _lines_low:
        base: lines
        blend: inlay
        blend_order: 2
    _polygons_inlay:
        base: polygons
        blend: inlay
        blend_order: 0
    _polygons_overlay:
        base: polygons
        blend: overlay
        blend_order: 1



layers:

    _xyz_dots:
        filter: {$geometry: point}
        # enabled: false
        data: {source: _xyzspace}
        draw:
            points:
                interactive: true
                collide: false
                color: |
                    function(){
                        var color
                        if (feature.color){
                            color = feature.color
                            }
                        else{color = [1,0,0,0.5]}
                        return color
                    }
                # color: |
                #     function(){
                #         var pi = 3.14159
                #         var zoom = pi - $zoom/20
                #         var opacity = Math.cos(zoom)
                #         return [1,0,0,opacity]
                #     }
                size: 6px
                # size: |
                #     function(){
                #         return feature.location.count()
                #         }
                text:
                    optional: true
                    font:
                        fill: red
                        size: 12px
                        stroke:
                            color: white
                            width: 2px
                outline:
                    color: [1,1,0,0.2]
                    width: .1px
    _xyz_lines:
        filter: {$geometry: line}
        # enabled: false
        data: {source: _xyzspace}
        # filter: {kind: point}
        draw:
            _lines:
                interactive: true
                # collide: false
                color: |
                    function(){
                        var color
                        if (feature.color){
                            color = feature.color
                            }
                        else{color = [1,1,0,0.3]}
                        return color
                        }
                # color: white
                # color: global.color_hash
                # outline: global.highlight
                width: 4px
                order: 2000
                # size: 5px
                # size: |
                #     function(){
                #         return 30 - (feature.scalerank * 4)
                #         }
                text:
                    # text_source: NAME
                    font:
                        fill: yellow
                        size: 12px



    _xyz_polygons:
        filter: {$geometry: polygon}
        # enabled: false
        data: {source: _xyzspace}
        # filter: |
        #     function(){
        #         if (feature.min_zoom){
        #             if(feature.min_zoom < $zoom){return true}
        #             }
        #         }
        _outlines:
            # enabled: false
            draw:
                _lines:
                    # collide: false
                    color: [0,1,1,0.35]
                    width: 1px
                    order: 2000
        draw:
            #polygons:
            _polygons_inlay:
                interactive: true
                # collide: false
                color: |
                    function(){
                        var color
                        if (feature.color){
                            color = feature.color
                            }
                        else{color = [1,0,1,0.3]}
                        return color
                        }
                # color:  [1,0,1,0.3]
                # color: global.color_hash
                width: 2px
                order: 300
                # size: 5px
                # size: |
                #     function(){
                #         return 30 - (feature.scalerank * 4)
                #         }
#             text:
# #                text_source: label
#                 text_source: |
#                     function(){
#                         return feature.name || feature.NAME
#                     }
#                 font:
#                     fill: grey
#                     size: 12px
#                     stroke:
#                         color: black
#                         width: 2px
