global:
    highlight:
        color: [1,1,1,0.25]
        width: 2px
    grey:
        color: [.5,.5,.5,0.25]
        width: 2px
    black:
        color: [0,0,0,0.25]
        width: 2px

    # replaced by app JS, used to look-up feature props that may be nested
    lookupFeatureProp: function(feature) { return null; }
    lookupFeatureLabelProp: function(feature) { return null; }

    # simple color by feature color property, or fallback to geometry type
    featureColorDefault: |
        function() {
            var color;
            if (feature.color) {
                color = feature.color
            }
            else if ($geometry === 'point') {
              color = [1, 0, 0, 0.5];
            }
            else if ($geometry === 'line') {
              color = [1, 1, 0, 0.3];
            }
            else if ($geometry === 'polygon') {
              color = [1, 0, 1, 0.3];
            }
            return color;
        }

    # dyanmic feature coloring, using the currently defined "color mode"
    # the `colorState` global holds settings that may be relevant to each mode (e.g. min/max, palette, etc.)
    featureColorDynamic: |
      function () {
        try {
          if (global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              return global.colorFunctions[global.colorMode].color(
                global.lookupFeatureProp(feature),
                global.colorState
              );
            }
            else {
              return global.colorFunctions[global.colorMode].color(
                feature,
                global.colorState
              );
            }
          }
        }
        catch(e) { } // fallthrough to default color on exception
        return 'rgba(127, 127, 127, .5)';
      }

    # for some color modes, sort features by currently selected value so they match the palette order
    featureSortTransform: |
      function (layer, _, tile) {
        var colorFunc = global.colorFunctions[global.colorMode];

        function getFeatureValue(f) {
          return colorFunc.index(global.lookupFeatureProp(f.properties), global.colorState);
        }

        try {
          // if the color mode has an index function, use it to sort features
          if (colorFunc.index) {
            //console.log('*** resorting...', tile.coords);
            layer.features.sort((a, b) => getFeatureValue(a) - getFeatureValue(b));
            //console.log('*** resorted', tile.coords);
          }
        }
        catch(e) { } // fallthrough to default color on exception
        return layer;
      }

    # optionally hide feature values that are above or below the current filter range
    featureFilterOutliers: |
        function() {
          if (global.colorState.featurePropHideOutliers && global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              var value = global.colorState.colorHelpers.parseNumber(global.lookupFeatureProp(feature));
              if (value < global.colorState.featurePropMinFilter ||
                  value > global.colorState.featurePropMaxFilter+1) {
                return false;
              }
            }
          }
          return true;
        }

    # optionally filter by specific property/value combination
    featureFilterSelectedValue: |
        function() {
          if (global.colorState.featurePropStack != null && global.colorState.featurePropValue != null) {
            var value = global.lookupFeatureProp(feature);
            if (value !== global.colorState.featurePropValue) {
              return false;
            }
          }
          return true;
        }

    # used for dynamic text_source on feature labels
    featureLabelText: |
        function() {
          return global.lookupFeatureLabelProp(feature);
        }

sources:
    _xyzspace: # this source is created at run-time based on XYZ space
        transform: global.featureSortTransform

styles:
    _points:
        base: points
        blend: overlay
        blend_order: 0
    _text:
        base: text
        blend: overlay
        blend_order: 11
    _lines:
        base: lines
        blend: overlay
        blend_order: 0
    _lines_low:
        base: lines
        blend: inlay
        blend_order: 2
    _polygons_inlay:
        base: polygons
        blend: inlay
        blend_order: 0
    _polygons_overlay:
        base: polygons
        blend: overlay
        blend_order: 1

layers:

    _xyz_dots:
        filter:
          all:
            - $geometry: point
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        draw:
            points:
                interactive: true
                collide: false
                blend_order: 0 # put our points under the basemap labels
                color: global.featureColorDefault
                size: 6px
                outline:
                    color: [1,1,0,0.2]
                    width: .1px
                text:
                    visible: false # updated by JS app at run-time
                    text_source: global.featureLabelText
                    optional: true
                    font: global.featureLabelFont # set by the basemap

    _xyz_lines:
        filter:
          all:
            - $geometry: line
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        draw:
            _lines:
                interactive: true
                color: global.featureColorDefault
                width: 4px
                order: 2000
            text:
              visible: false # updated by JS app at run-time
              text_source: global.featureLabelText
              # unique repeat group per feature, to avoid culling of labels with same values
              repeat_group: function() { return $id }
              font: global.featureLabelFont # set by the basemap

    _xyz_polygons:
        filter:
          all:
            - $geometry: polygon
            - global.featureFilterOutliers
            - global.featureFilterSelectedValue
        data: { source: _xyzspace }
        _outlines:
            draw:
                _lines:
                    color: [0, 1, 1, 0.35]
                    width: 1px
                    order: 2000
        draw:
            _polygons_inlay:
                interactive: true
                color: global.featureColorDefault
                width: 2px
                order: 300
            text:
              visible: false # updated by JS app at run-time
              text_source: global.featureLabelText
              # unique repeat group per feature, to avoid culling of labels with same values
              repeat_group: function() { return $id }
              repeat_distance: 700px # allow polygon labels to repeat over a longish distance
              font: global.featureLabelFont # set by the basemap
