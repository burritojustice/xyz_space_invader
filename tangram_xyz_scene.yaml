global:
    highlight:
        color: [1,1,1,0.25]
        width: 2px
    grey:
        color: [.5,.5,.5,0.25]
        width: 2px
    black:
        color: [0,0,0,0.25]
        width: 2px

    # replaced by app JS, used to look-up feature props that may be nested,
    # and we don't want to re-parse the
    lookupFeatureProp: function(feature) { return null; }

    # dyanmic feature coloring, using the currently defined "color mode"
    # the `colorState` global holds settings that may be relevant to each mode (e.g. min/max, palette, etc.)
    featureColorDynamic: |
      function () {
        try {
          if (global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              return global.colorFunctions[global.colorMode].color(
                global.lookupFeatureProp(feature),
                global.colorState
              );
            }
            else {
              return global.colorFunctions[global.colorMode].color(
                feature,
                global.colorState
              );
            }
          }
        }
        catch(e) { } // fallthrough to default color on exception
        return 'rgba(127, 127, 127, .5)';
      }

    # simple color by feature color property, or fallback to geometry type
    featureColorDefault: |
        function() {
            var color;
            if (feature.color) {
                color = feature.color
            }
            else if ($geometry === 'point') {
              color = [1, 0, 0, 0.5];
            }
            else if ($geometry === 'line') {
              color = [1, 1, 0, 0.3];
            }
            else if ($geometry === 'polygon') {
              color = [1, 0, 1, 0.3];
            }
            return color;
        }

    # optionally hide feature values that are above or below the current filter range
    featureFilterOutliers: |
        function() {
          if (global.colorState.featurePropHideOutliers && global.colorFunctions[global.colorMode]) {
            if (global.colorFunctions[global.colorMode].useProperty) {
              var value = global.colorState.colorHelpers.parseNumber(global.lookupFeatureProp(feature));
              if (value < global.colorState.featurePropMinFilter ||
                  value > global.colorState.featurePropMaxFilter+1) {
                return false;
              }
            }
          }
          return true;
        }

sources:
    _xyzspace:
        url: https://xyz.api.here.com/hub/spaces/cacVJZ1K/tile/web/{z}_{x}_{y}
        type: GeoJSON
        url_params:
            access_token: AVoxWfIDYgZOr4zOaUV3urg
            # tags: YOUR_TAG
            # limit: 50000 #
            clip: true

styles:
    _points:
        base: points
        blend: overlay
        blend_order: 0
    _text:
        base: text
        blend: overlay
        blend_order: 11
    _lines:
        base: lines
        blend: overlay
        blend_order: 0
    _lines_low:
        base: lines
        blend: inlay
        blend_order: 2
    _polygons_inlay:
        base: polygons
        blend: inlay
        blend_order: 0
    _polygons_overlay:
        base: polygons
        blend: overlay
        blend_order: 1

layers:

    _xyz_dots:
        filter:
          all:
            - $geometry: point
            - global.featureFilterOutliers
        data: { source: _xyzspace }
        draw:
            points:
                interactive: true
                collide: false
                blend_order: 0 # put our points under the basemap labels
                color: global.featureColorDefault
                size: 6px
                outline:
                    color: [1,1,0,0.2]
                    width: .1px
                # text:
                #     text_source: global.prop
                #     optional: true
                #     font:
                #         fill: yellow
                #         size: 12px
                #         stroke:
                #             color: black
                #             width: 2px

    _xyz_lines:
        filter:
          all:
            - $geometry: line
            - global.featureFilterOutliers
        data: { source: _xyzspace }
        draw:
            _lines:
                interactive: true
                color: global.featureColorDefault
                width: 4px
                order: 2000

    _xyz_polygons:
        filter:
          all:
            - $geometry: polygon
            - global.featureFilterOutliers
        data: { source: _xyzspace }
        _outlines:
            draw:
                _lines:
                    color: [0, 1, 1, 0.35]
                    width: 1px
                    order: 2000
        draw:
            _polygons_inlay:
                interactive: true
                color: global.featureColorDefault
                width: 2px
                order: 300
