# @patriciogv - 2015
# @meetar
# @burritojustice - 2019

import:
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/functions/pulse.yaml
    - https://tangrams.github.io/blocks/patterns/stripes.yaml
    - https://tangrams.github.io/blocks/patterns/dots.yaml
    - https://tangrams.github.io/blocks/space/screen.yaml

global:
    access_token: AS5fV38SlsAWy5busf3eizY #ALqnbtEI8h0VONQwJgBcn3Y
    order: function () { return feature.sort_key; }

sources:
    mapzen: #xyz-osm
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
        url_params:
            access_token: global.access_token
        max_zoom: 2
    _xyzspace:
        max_zoom: 1
        
scene:
    background:
        color: white
                
layers:

    _xyz_dots:
        filter: {$geometry: point}
        # enabled: false
        data: {source: _xyzspace}
        draw:
            style: alberspoints
            text:
                style: alberstext
                

    _xyz_lines:
        filter: {$geometry: line}
        # enabled: false
        data: {source: _xyzspace}
        draw:
            style: alberslines

    _xyz_polygons:
        filter: {$geometry: polygon}
        # enabled: false
        data: {source: _xyzspace}
        _outlines:
            # enabled: false
            draw:
                _lines:
                    style: alberslines

        draw:
            _polygons: # was _polygons_inlay:
                style: albers
            text: 
                style: alberstext
    
    water:
        data: { source: mapzen }
        draw:
            waves:
                order: 20
                cap: round
                width: 8px
                color: [0.824, 0.812, 0.804]
                width: 5px
            # alberspoints:
            #     buffer: 8px;
            #     font:
            #         typeface: Italic 14px Times
            #         fill: black
            #         stroke: { color: white , width: 5 }
        lakes:
            filter: { kind: [lake, riverbank, dock, water, basin, reservoir, playa, canal, dam, ditch, drain, river, stream]}
            draw: 
                alberslines:
                    order: global.order
                    color: black
                    cap: round
                    width: .5px
#     earth:
#         data: { source: mapzen }
#         draw:
#             albers:
#                 order: 21
#                 color: black
#                 cap: round
#                 width: 6px
    # landuse:
    #     data: { source: mapzen }
    #     draw:
    #         dots:
    #             order: 1
    #             color: [0,0,0,0.15]
    buildings:
        data: { source: mapzen }
        draw:
            b_border:
                order: global.order
                color: [[10,[1,1,1]],[15,[1,1,1]],[18,[0.306, 0.306, 0.306]]]
                width: [[10, 1], [12, 1px],[14, 1px], [16, 2px], [17, 3px], [18, 5px]]
    roads:
        data: { source: mapzen }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            _lines:
                style: alberslines
                order: 100
                color: [0,0,0,0.5]
                width: [[5, .5px],[15, 1px]]
                # outlines:
                #     # style: alberslines
                #     # order: 99
                #     color: green
                #     width: [[5, 2.px],[15, 4px],[85, 60]]

    boundaries:
#         enabled: false
        data: { source: mapzen }
        draw:
            _lines:
                style: alberslines
                order: 10
                color: [0,0,0,0.25]
                width: [[5,1px],[10,2px]]
                outlines:
                    style: alberslines
                    # order: 9
                    color: white
                    width: 2px
    places:
        data: { source: mapzen }
        # filter: { kind: country }
#         filter: { name: [British Columbia, Alberta, Saskatchewan, Manitoba, Ontario, Québec, New Brunswick, Nova Scotia, Prince Edward Island, Newfoundland and Labrador, ᓄᓇᕗᑦ Nunavut, Northwest Territories, Yukon]}
        draw:
            text:
                style: alberstext
                buffer: 8px
                font:
                    # typeface: Italic 10px Times
                    fill: black
                    stroke: { color: white , width: 5 }
styles:
    albers:
        base: polygons
        animated: true
        shaders:
            defines:
                EARTH_RADIUS: 6378137.0
                PI: 3.14159265358979323846
                HALF_PI: 1.570796327
                QUARTER_PI: .785398163
                deg2rad(d): (d)*PI/180.0
                rad2deg(d): (d)*180.0/PI
            blocks:
                global: |
                    // http://wiki.openstreetmap.org/wiki/Mercator
                    float y2lat_m (float y) { return rad2deg(2.0*atan(exp((y/EARTH_RADIUS)))-HALF_PI); }
                    float x2lon_m (float x) { return rad2deg(x/EARTH_RADIUS); }

                    float lat2y_m (float lat) { return EARTH_RADIUS*log(tan(QUARTER_PI+ deg2rad(lat)/2.0)); }
                    float lon2x_m (float lon) { return deg2rad(lon)*EARTH_RADIUS; }
                    
                    // convert from lat/long to albers -- from https://gist.github.com/RandomEtc/476238
                    vec2 albers(float lat, float lng, float lat0, float lng0, float phi1, float phi2) {
                        float n = 0.5 * (sin(phi1) + sin(phi2));
                        float c = cos(phi1);
                        float C = c*c + 2.*n*sin(phi1);
                        float p0 = sqrt(C - 2.*n*sin(lat0)) / n;
                        float theta = n * (lng * PI/180. - lng0);
                        float p = sqrt(C - 2.*n*sin(lat* PI/180.)) / n;

                        float x = p * sin(theta);
                        float y = p0 - p * cos(theta);

                        return vec2(x,y);
                    }
                position: |
                    // mercator position of the current vertex, u_map_position = center of screen,
                    // position.xy = vertex screen position in meters from the center of the screen
                    vec2 mercator = u_map_position.xy + position.xy;
                    float lat = y2lat_m(mercator.y);
                    float lon = x2lon_m(mercator.x);

                    // Latitude_Of_Origin
                    float centerlat = deg2rad(y2lat_m(u_map_position.y));
                    // Central_Meridian
                    float centerlon = deg2rad(x2lon_m(u_map_position.x));

                    // Standard_Parallel_1
                    float phi1 = deg2rad(y2lat_m(u_map_position.y) + 10.);
                    // Standard_Parallel_2
                    float phi2 = deg2rad(y2lat_m(u_map_position.y) - 10.);

                    position.xy = albers(lat, lon, centerlat, centerlon, phi1, phi2)*EARTH_RADIUS;

    alberslines:
        base: lines
        mix: albers
    alberspoints:
        base: points
        mix: albers
    alberstext:
        base: text
        mix: albers
    pallete:
        shaders:
            blocks: 
                global: |
                    // Common Values 
                    //================================
                    float radio = 0.05;
                    vec2 size = vec2(1.,.6);
                    vec3 background = vec3(1.);
                    vec3 midle = vec3(0.824, 0.812, 0.804);
                    vec3 foreground = vec3(0.275,0.298,0.251);
    border:
        base: lines
        mix: [functions-pulse, functions-aastep, pallete, alberslines]
        texcoords: true
        shaders:
            blocks: 
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.7,.1)+pulse(st.x,.35,.25));
                    color.rgb = mix(background,color.rgb,pattern);
    b_border:
        base: lines
        mix: [functions-pulse, functions-aastep, pallete, alberslines]
        texcoords: true
        shaders:
            blocks: 
                color: |
                    vec2 st = v_texcoord.xy;
                    float pattern = aastep(.5,pulse(st.x,.5,.2));
                    color.rgb = mix(background,color.rgb,pattern);
                    
    waves:
        base: polygons
        mix: [space-screen, pallete, patterns-stripes, albers]
        shaders: 
            blocks: 
                color: |
                    vec2 pos = getScreenNonStretchCoords();
                    pos.y += sin(pos.x*30.)*.01;
                    color.rgb = mix(color.rgb,background,stripes(pos*200.,.4));
    hatch:
        base: polygons
        mix: [functions-aastep, pallete, patterns-stripes, space-screen, albers]
        shaders: 
            blocks: 
                color: |
                    vec2 st = getScreenNonStretchCoords();
                    color.rgb = mix(color.rgb,background,diagonalStripes(st*300.));
